{"version":3,"file":"static/js/427.ee2e8c42.chunk.js","mappings":"sLAEaA,E,QAAMC,GAAAA,OAAH,iW,SCAHC,EAAS,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACjC,OAAO,SAACJ,EAAD,CAAKI,KAAMA,EAAX,SAAkBD,M,0FCAdE,GAASJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,yHAQNM,EAAYN,EAAAA,GAAAA,KAAH,gDAITO,EAAcP,EAAAA,GAAAA,MAAH,6F,SCbXQ,EAAa,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,KAAMR,EAA8B,EAA9BA,SAA8B,IAApBC,KAAAA,OAAoB,MAAb,OAAa,EACrE,OACE,UAACI,EAAD,YACE,SAACD,EAAD,UAAYG,KACZ,SAACL,EAAD,CAAQM,KAAMA,EAAMP,KAAMA,IACzBD,O,4ECJMS,GAAMX,EAAAA,EAAAA,IAAO,MAAPA,CAAcY,EAAAA,GAAOC,EAAAA,GAAQC,EAAAA,GAAOC,EAAAA,GAASC,EAAAA,K,yOCAnDC,GAAQjB,EAAAA,EAAAA,IAAOkB,EAAAA,GAAPlB,CAAH,yFAULmB,GAJOnB,EAAAA,GAAAA,GAAH,kDAISA,EAAAA,EAAAA,IAAOoB,EAAAA,GAAPpB,CAAH,0C,SCLVqB,EAAe,WAC1B,IAAIC,EAASC,EAAAA,KAAaC,MAAM,CAC9Bd,KAAMa,EAAAA,KAAaE,IAAI,IAAIC,SAAS,8BACpCC,MAAOJ,EAAAA,KAEJI,MAAM,yBACND,SAAS,+BACZE,SAAUL,EAAAA,KAAaE,IAAI,IAAIC,SAAS,oCAGpCG,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAAC,KAAD,CACEC,cAAe,CACbrB,KAAM,GACNiB,MAAO,GACPC,SAAU,IAEZI,iBAAkBV,EAClBW,SAbiB,SAAC,EAAD,GAA+C,IAA5CvB,EAA2C,EAA3CA,KAAMiB,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAcM,EAAgB,EAAhBA,UACjDC,QAAQC,IAAI1B,EAAMiB,EAAOC,GACzBC,EAASQ,EAAAA,EAAAA,SAAwB,CAAE3B,KAAAA,EAAMiB,MAAAA,EAAOC,SAAAA,KAChDM,KAGA,UASE,UAACf,EAAD,CAAYmB,aAAa,MAAzB,WACE,SAAC,IAAD,CAAY7B,KAAM,OAAQC,KAAM,OAAhC,UACE,SAACO,EAAD,CAAOsB,UAAU,MAAM7B,KAAK,YAG9B,SAAC,IAAD,CAAYD,KAAM,QAASC,KAAM,QAAjC,UACE,SAACO,EAAD,CAAOsB,UAAU,MAAM7B,KAAK,aAG9B,SAAC,IAAD,CAAYD,KAAM,WAAYC,KAAM,WAAYP,KAAM,WAAtD,UACE,SAACc,EAAD,CAAOsB,UAAU,MAAM7B,KAAK,gBAE9B,SAACT,EAAA,EAAD,CAAQE,KAAK,SAAb,4BCjCR,EAXiB,WACf,OACE,UAACQ,EAAA,EAAD,CAAK6B,GAAI,GAAI5B,MAAM,OAAnB,WACE,SAACD,EAAA,EAAD,CAAK8B,GAAG,KAAKC,GAAI,GAAjB,2BAGA,SAACrB,EAAD","sources":["components/Auth/common/Button/Button.styled.js","components/Auth/common/Button/Button.jsx","components/Auth/common/Inpute/Inpute.styled.js","components/Auth/common/Inpute/Inpute.jsx","components/Box/Box.js","components/Auth/RegisterForm/RegisterForm.styled.js","components/Auth/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Btn = styled.button`\n  width: 105px;\n  height: 30px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 5px;\n  border: none;\n  background-color: #0396aa;\n  color: #fff;\n  border: 1px solid #fff;\n\n  cursor: pointer;\n  &:active {\n    background-color: #027583;\n    color: #fff;\n    border: 1px solid #fff;\n  }\n`;\n","import { Btn } from './Button.styled';\n\nexport const Button = ({ children, type }) => {\n  return <Btn type={type}>{children}</Btn>;\n};\n","import { Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const Inpute = styled(Field)`\n  border-radius: 5px;\n  border: none;\n  height: 20px;\n  outline: none;\n  padding: 3px 10px;\n`;\n\nexport const LabelText = styled.span`\n  padding-bottom: 5px;\n`;\n\nexport const InputeTitle = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n`;\n","import { Inpute, LabelText, InputeTitle } from './Inpute.styled';\n\nexport const FormInpute = ({ text, name, children, type = 'text' }) => {\n  return (\n    <InputeTitle>\n      <LabelText>{text}</LabelText>\n      <Inpute name={name} type={type} />\n      {children}\n    </InputeTitle>\n  );\n};\n","import styled from 'styled-components';\nimport { color, layout, space, flexbox, border } from 'styled-system';\n\nexport const Box = styled('div')(color, layout, space, flexbox, border);\n","import styled from 'styled-components';\nimport { ErrorMessage, Form } from 'formik';\n\nexport const Error = styled(ErrorMessage)`\n  padding: 5px 0 5px 0;\n  color: #ff8900;\n  font-weight: 500;\n`;\n\nexport const Text = styled.h1`\n  padding-bottom: 40px;\n`;\n\nexport const FormikForm = styled(Form)`\n  width: 320px;\n`;\n","import { authOperations } from 'redux/auth';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { FormInpute } from '../common/Inpute/Inpute';\nimport { Button } from '../common/Button/Button';\nimport { FormikForm, Error } from './RegisterForm.styled';\n\nexport const RegisterForm = () => {\n  let schema = yup.object().shape({\n    name: yup.string().max(16).required('\"Name\" is a required field'),\n    email: yup\n      .string()\n      .email('Must be a valid email')\n      .required('\"Email\" is a required field'),\n    password: yup.string().max(16).required('\"Password\" is a required field'),\n  });\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, email, password }, { resetForm }) => {\n    console.log(name, email, password);\n    dispatch(authOperations.register({ name, email, password }));\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormikForm autoComplete=\"off\">\n        <FormInpute text={'Name'} name={'name'}>\n          <Error component=\"div\" name=\"name\" />\n        </FormInpute>\n\n        <FormInpute text={'Email'} name={'email'}>\n          <Error component=\"div\" name=\"email\" />\n        </FormInpute>\n\n        <FormInpute text={'Password'} name={'password'} type={'password'}>\n          <Error component=\"div\" name=\"password\" />\n        </FormInpute>\n        <Button type=\"submit\">Register</Button>\n      </FormikForm>\n    </Formik>\n  );\n};\n","import { Box } from 'components/Box';\nimport { RegisterForm } from 'components/Auth/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <Box pt={40} color=\"#fff\">\n      <Box as=\"h1\" pb={40}>\n        Registration\n      </Box>\n      <RegisterForm />\n    </Box>\n  );\n};\n\nexport default Register;\n"],"names":["Btn","styled","Button","children","type","Inpute","Field","LabelText","InputeTitle","FormInpute","text","name","Box","color","layout","space","flexbox","border","Error","ErrorMessage","FormikForm","Form","RegisterForm","schema","yup","shape","max","required","email","password","dispatch","useDispatch","initialValues","validationSchema","onSubmit","resetForm","console","log","authOperations","autoComplete","component","pt","as","pb"],"sourceRoot":""}